= Curent milestone: 0.1

== Features

== Improvements

== Bugfixes

= Next milestone: 0.2

== Features
* Learning: record chosen QueryMatches, weight future matches with this information
* Expand RunnerSessionData::shouldStartMatch with more powerful filtering
    * A MatchType filter (from user, or UI component)
    * Query term pre-processing?

== Improvements
* Improve RunnerSessionData::updateMatches
    * find a nicer way to to do updates than comparing data(), nested loops..
* Review QuerySession::MathType entries
    * MovieType as a specialization of video?
    * spread out across the address space with explicit values?
* API review of all public classes
* localization/i18n in plugin metadata (name, description)
* confirm that the QList<int>s used in RunnerModel::data() works from QML
    * MatchTypesRole
    * SourcesUsedRole

= Unscheduled

== To be scheduled
* Provide per-plugin help in the json file, exported to the RunnerModel
* Add application affiliation to the json & export to RunnerModel
    * With model filtering, it becomes easy to get plugins relevant to a specific application
* Runner plugin test harness that "tortures" runners to see how they perform
    * Correctness of results
    * Threading safety
    * Speed
* Allow unloading of runners in RunnerModel
    * currently Runner plugins hang out in memory once access the first time
    * ref counted and delete when no longer used
* Runner plugin configuration

== Needs more evaluation (aka "Is this necessary/useful?")
* A nicer way to find plugins in QuerySessionThread::loadRunnerMetaData()?
    * it is currently a little ugly, including the hardcoded "sprinter"
* Extending QueryContext
    * an optional matchTypes set which can be used to filter runners in RunnerSessionData::shouldStartMatch
* Tiered match run priorities on runners set by the user
    * 0 - in worker thread; 1 launched first in threadpool; 2 launch last in threadpool
    * a launcher might request app launchers in tier 0, e.g.
* Query pre-processing (similar to Plasma::RunnerContext::Private::determineType)
    * this may actually be unecessary, or at least not as useful as was expected when krunner was in devel? revisit when more runner are ported
* Actions on matches
    * Could be done using QueryMatch::isSearchTerm to refine search?
* MatchType specializations
    * Allow QueryMatch to have a "free-form" QString that would represent an optional specialation to MatchType? (Only makes sense if this is a common requirement, as it incurs more overhead for all matches)
* QueryMatch::isSearchTerm could allow setting whether to only run against the same runner that generated it
* Measure for possible performance bottlenecks
    * QuerySessionThread::startSync does all sync's at once (no chunking)
    * syncMatches does a fair amount of collection traversal
    * updateMatches is really ugly ...